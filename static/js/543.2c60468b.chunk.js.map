{"version":3,"file":"static/js/543.2c60468b.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/ankr-provider.ts","../node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts","../node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts","../node_modules/@ethersproject/providers/src.ts/fallback-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts","../node_modules/@ethersproject/providers/src.ts/infura-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts","../node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts","../node_modules/@ethersproject/providers/src.ts/pocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\"\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\nimport { Network } from \"@ethersproject/networks\";\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport type { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    readonly apiKey: string;\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n","\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || typeof(result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string | null;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || null);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n","\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            if (method === \"call\" && params.blockTag) {\n                return provider[method](params.transaction, params.blockTag);\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n","\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n","\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n","/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n\n        } else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n\n        const connection: ConnectionInfo = { headers: { }, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\": case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\": case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    AnkrProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n"],"names":["WS","WebSocket","Error","error","logger","Logger","version","throwError","operation","NextId","WebSocketProvider","url","network","_pollingInterval","_wsReady","defineReadOnly","connection","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","this","_websocket","_detectNetwork","value","blockNumber","rid","Promise","resolve","reject","stringify","jsonrpc","tag","param","subIdPromise","_subIds","all","then","subId","event","type","_subscribe","BigNumber","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","length","listenerCount","readyState","onerror","close","JsonRpcProvider","StaticJsonRpcProvider","_super","detectNetwork","_network","UrlJsonRpcProvider","apiKey","checkAbstract","getStatic","key","address","defaultApiKey","AlchemyWebSocketProvider","AlchemyProvider","replace","throwArgumentError","host","name","arguments","allowGzip","throttleCallback","attempt","showThrottleMessage","getHost","AnkrProvider","projectSecret","user","password","CloudflareProvider","perform","blockTag","getTransactionPostData","transaction","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","hexValue","hexlify","accessListify","map","set","storageKeys","join","getResult","status","match","toLowerCase","indexOf","throttleRetry","getJsonResult","checkLogTag","parseInt","substring","checkError","isHexString","body","responseText","EtherscanProvider","getBaseUrl","module","query","reduce","accum","baseUrl","apikey","post","getPostUrl","getUrl","getPostData","procFunc","throttleSlotInterval","isCommunityResource","payloadStr","headers","fetchJson","deepCopy","fetch","position","hex","signedTransaction","catch","boolean","includeTransactions","txhash","transactionHash","postData","args","fromBlock","toBlock","topics","topic0","logs","blocks","i","blockHash","getBlock","parseFloat","ethusd","addressOrName","startBlock","endBlock","resolveName","startblock","endblock","sort","tx","creates","contractAddress","item","transactionResponse","timeStamp","timestamp","BaseProvider","now","Date","getTime","checkNetworks","networks","chainId","ensAddress","median","values","maxDelta","slice","middle","Math","floor","a","b","abs","serialize","toString","Array","isArray","v","nextRid","stall","duration","cancel","timer","promise","clearTimeout","setTimeout","getPromise","wait","func","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","get","start","done","getProcessFunc","normalize","configs","c","ceil","_highestBlockNumber","shallowCopy","confirmations","transactions","quorum","tally","count","check","normalizedTally","waitForSync","poll","cancelled","oncePoll","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","getLogs","FallbackProvider","providers","providerConfigs","configOrProvider","index","Provider","stallTimeout","freeze","priority","total","networkOrReady","getNetwork","sendTransaction","results","getBlockNumber","shuffled","first","t0","inflightWeight","runner","staller","backend","waiting","push","race","errors","errorCode","props","reason","IpcProvider","defaultProjectId","InfuraWebSocketProvider","InfuraProvider","projectId","apiKeyObj","assertArgument","argument","JsonRpcBatchProvider","_nextId","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","NodesmithProvider","defaultApplicationId","PocketProvider","applicationId","loadBalancer","applicationSecretKey","getDefaultProvider","options","n","_defaultProvider","Web3Provider"],"sourceRoot":""}